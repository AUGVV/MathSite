@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    int count = 1;
}
<link rel="stylesheet" type="text/css" href="/css/Pictures.css">
<link rel="stylesheet" type="text/css" href="/css/Raiting.css">
<link rel="stylesheet" type="text/css" href="/css/FindBar.css">
<link rel="stylesheet" type="text/css" href="/css/Tags.css">
<link rel="stylesheet" type="text/css" href="/css/Comment.css">

<input type="hidden" id="taskid" name="CurrentId" value="@ViewData["Id"]" />
<input type="hidden" id="username" value="@ViewData["UserName"]" />

<div class="search-bar">
    <form>
        <input type="text" name="SearchText" placeholder="@Localizer["Search"]">
        <button type="submit"></button>
    </form>
</div><br>
<div class="text-center">
    <h1>@ViewData["CurrentTask"]</h1>
</div>
<div class="text-center">
    <b>@Localizer["TaskType"]</b>
    @ViewData["TaskType"]<br>
</div><br>
<div class="text-center">
    @foreach (var item in Model.Tags)
    {
        <span class="static-tag">#@item.TagName</span>
    }
</div><br>
@if ((int)ViewData["PicturesCount"]! > 0)
{
    <div class="slideshow-container">
        @foreach (var item in Model.Urls)
        {
            <div class="mySlides">
                <div class="numbertext">@count / @ViewData["PicturesCount"]</div>
                <img src=@item style="width:100%">
            </div>
            count = count + 1;
        }
        @{
            count = 1;
        }
        <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
        <a class="next" onclick="plusSlides(1)">&#10095;</a>
    </div>
    <div style="text-align:center">
        @foreach (var item in Model.Urls)
        {
            <span class="dot" onclick="currentSlide(@count)"></span>
            count = count + 1;
        }
    </div><br>
}
<div class="text-center">
    <b>@Localizer["Condition"]</b><br>
    @ViewData["CurrentCondition"]<br><br>
</div>
@if ((bool)ViewData["IsAutorize"] == true)
{
    <div class="text-center">
        <b>@Localizer["TypeAnswer"]</b><br>
        <input type="text" name="Answer" id="currentanswer" class="input-bars"><br><br>
        <div hidden id="answer-not-correct">
            <b class="alert alert-danger">@Localizer["BadAnswer"]</b><br><br>
        </div>
        <div hidden id="answer-correct">
            <b class="alert alert-success">@Localizer["GoodAnswer"]</b><br><br>
        </div>
        <button id="toanswer" type="submit" class="btn btn-primary">@Localizer["ToAnswer"]</button><br><br>
    </div>
    @if ((bool)ViewData["IsVoted"] == false)
    {
        <div class="rating-area" id="raitings-active">
            <input type="radio" id="star-5" name="rating" value="5" onclick="Rating(5)">
            <label for="star-5"></label>
            <input type="radio" id="star-4" name="rating" value="4" onclick="Rating(4)">
            <label for="star-4"></label>
            <input type="radio" id="star-3" name="rating" value="3" onclick="Rating(3)">
            <label for="star-3"></label>
            <input type="radio" id="star-2" name="rating" value="2" onclick="Rating(2)">
            <label for="star-2"></label>
            <input type="radio" id="star-1" name="rating" value="1" onclick="Rating(1)">
            <label for="star-1"></label>
        </div>
        <div class="rating-result" id="raitings-new" hidden></div>
    }
    else if ((bool)ViewData["IsVoted"] == true)
    {
        <div class="rating-result" id="raitings-show">
            @for (int i = 0; i < 5 - (int)ViewData["Rating"]; i++)
            {
                <span></span>
            }
            @for (int i = 0; i < (int)ViewData["Rating"]; i++)
            {
                <span class="active"> </span>
            }
        </div>
    }
    <template id="CommentTemplate">
        <div class="comment">
            <div id="who" class="who"></div>
            <span id="text"></span>
            <br>
            <div class="likes-bar" id="likes-body">
                <button id="like" class="like">@Localizer["Like"]</button>
                <span class="like like-temp" id="like-temp">0</span>
                <button id="dislike" class="dislike">@Localizer["Dislike"]</button>
                <span class="dislike dislike-temp" id="dislike-temp">0</span>
            </div>
        </div>
    </template>
    <b>@Localizer["Comment"]</b>
    <br>
    <textarea wrap="hard" placeholder="as you say" cols="120" rows="5" style="resize:none;" id="comment"></textarea>
    <br>
    <button id="say-to-task" type="submit" class="btn btn-primary">@Localizer["Send"]</button>
    <br>
    <br>
    <div class="comment-container" id="comment-body">
        @foreach (var item in Model.Comments)
        {
            <div class="comment">
                <div class="who">
                    @item.Author
                </div>
                <span>
                    @item.Text
                </span>
                <br>
                <div class="likes-bar">
                    <button class="like" onclick="DisLike('like', @item.Id)">@Localizer["Like"]</button>
                    <span class="like" id="like-@item.Id" value="@item.Id">@item.Like</span>
                    <button class="dislike" onclick="DisLike('dislike', @item.Id)">@Localizer["Dislike"]</button>
                    <span class="dislike" id="dislike-@item.Id" value="@item.Id">@item.Dislike </span>
                </div>
            </div>
        }
    </div>
}

<script src="/js/signalr/dist/browser/signalr.min.js"></script>
<script>
    const hubConnection = new signalR.HubConnectionBuilder().withUrl("/hubs").build();

    var slideCount = @ViewData["PicturesCount"];
    var slideIndex = 1;
    var CurrentId = document.getElementById("taskid").value;
    var UserName = document.getElementById("username").value;

    showSlides(slideIndex);

    document.getElementById("toanswer").addEventListener("click", function (e) {
        var Answer = document.getElementById("currentanswer").value;
        if (Answer == "") { alert('Введите ваш ответ') }
        else {
            hubConnection.invoke('QuestionAnswer', CurrentId, Answer, UserName).catch(function (err) {
                return console.error(err.toString());
            });
        }
    });
    document.getElementById("say-to-task").addEventListener("click", function (e) {
        var WhatSay = document.getElementById("comment").value;
        if (WhatSay == "") { alert('Комментарий не должен быть пустыми') }
        else {
            hubConnection.invoke('AddToComment', CurrentId, WhatSay, UserName).catch(function (err) {
                return console.error(err.toString());
            });
        }
    });
    function DisLike(state, id) {
        hubConnection.invoke('DisLikeComment', id, UserName, state).catch(function (err) {
            return console.error(err.toString());
        });
    }
    hubConnection.on('CommentLiked', function (CommentId, NewLikeCount, DisOrLike) {
        if (DisOrLike == "like") {
            document.getElementById("like-" + CommentId).innerHTML = NewLikeCount;
        }
        else if (DisOrLike == "dislike") {
            document.getElementById("dislike-" + CommentId).innerHTML = NewLikeCount;
        }
    });
    hubConnection.on('CommentsDo', function (TaskId, CommentId, Author, Text) {
        if (TaskId == document.getElementById("taskid").value) {
            var Comment = CommentTemplate.content.cloneNode(true);
            Comment.getElementById('who').innerHTML = Author
            Comment.getElementById('text').innerHTML = Text
            Comment.getElementById('like').addEventListener("click", function () { DisLike("like", CommentId) } )
            Comment.getElementById('dislike').addEventListener("click", function () { DisLike("dislike", CommentId) })
            Comment.getElementById('like-temp').id = 'like-' + CommentId;
            Comment.getElementById('dislike-temp').id = "dislike-" + CommentId;
            var CommentTemp = document.getElementById('comment-body').appendChild(Comment);
        }
    });
    hubConnection.on('Result', function (message) {
        if (message == true) {
            document.getElementById("answer-correct").hidden = false;
            document.getElementById("answer-not-correct").hidden = true;
        }
        else {
            document.getElementById("answer-not-correct").hidden = false;
            document.getElementById("answer-correct").hidden = true;
        }
    });
    function Rating(e) {
        var CurrentId = document.getElementById("taskid").value;
        hubConnection.invoke('AddRating', e, CurrentId, UserName).catch(function (err) {
            return console.error(err.toString());
        });
    }
    hubConnection.start();

    hubConnection.on('Raiting', function (message) {
        var num = Number(message)
        for (var i = 0; i < 5 - num; i++) {
            let span = document.createElement('span');
            document.getElementById('raitings-new').appendChild(span);
        }
        for (var i = 0; i < num; i++) {
            let span = document.createElement('span');
            span.classList.add("active");
            document.getElementById('raitings-new').appendChild(span);
        }
        document.getElementById("raitings-active").hidden = true;
        document.getElementById("raitings-new").hidden = false;
    });

        function plusSlides(n) {
            showSlides(slideIndex += n);
        }

        function currentSlide(n) {
            showSlides(slideIndex = n);
        }

    function showSlides(n) {
        if (slideCount > 0) {
            var i;
            var slides = document.getElementsByClassName("mySlides");
            var dots = document.getElementsByClassName("dot");
            if (n > slides.length) { slideIndex = 1 }
            if (n < 1) { slideIndex = slides.length }
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none";
            }
            for (i = 0; i < dots.length; i++) {
                dots[i].className = dots[i].className.replace(" active", "");
            }
            slides[slideIndex - 1].style.display = "block";
            dots[slideIndex - 1].className += " active";
        }
     }
</script>
